ic(14, 4, 5, 7)
ic(14, 1, 5, 7)
ic(14, 3, 9, 6)
ic(14, 6, 9, 8)
ic(14, 3, 5, 6)
ic(14, 2, 5, 8)
?combination
?comb
require(combinat)
install.packages("combinat")
library(combinat)
combn(2, 7)
combn(7, 2)
t <- data.frame('1' = c(1, 0, 1, 0. 0, 1, 0 , 1, 0, 1, 0, 0), '2' = c(1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0), '3' =c(1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1), '4'=c(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0), '5'=c(0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0), '6'=c(0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0), '7'=c(0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0))
t <- data.frame('1' = c(1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0), '2' = c(1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0), '3' =c(1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1), '4'=c(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0), '5'=c(0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0), '6'=c(0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0), '7'=c(0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0))
t
t <- data.frame(1 = c(1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0), '2' = c(1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0), '3' =c(1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1), '4'=c(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0), '5'=c(0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0), '6'=c(0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0), '7'=c(0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0))
t
filter(t, x1=1 & x3=1)
names(t)
filter(t, X1=1 & X3=1)
filter(t, X1==1 & X3==1)
filter(t, X1==1 & X4==1)
filter(t, X1==1 & X5==1)
filter(t, X1==1 & X6==1)
filter(t, X1==1 & X7==1)
filter(t, X2==1 & X3==1)
filter(t, X2==1 & X4==1)
filter(t, X2==1 & X5==1)
filter(t, X2==1 & X6==1)
filter(t, X2==1 & X7==1)
filter(t, X3==1 & X4==1)
filter(t, X3==1 & X5==1)
filter(t, X3==1 & X6==1)
filter(t, X3==1 & X7==1)
filter(t, X4==1 & X5==1)
filter(t, X4==1 & X6==1)
filter(t, X4==1 & X7==1)
filter(t, X5==1 & X6==1)
filter(t, X5==1 & X7==1)
filter(t, X6==1 & X7==1)
filter(t, X1==1 & X2==1 & X3==1)
filter(t, X1==1 & X2==1 & X5==1)
filter(t, X1==1 & X2==1 & X7==1)
filter(t, X2==1 & X5==1 & X7==1)
filter(t, X2==1 & X5==1 & X7==1 & X1==1)
setwd("~/")
fbb <- read.csv("/fbb_06_22_15.csv")
fbb <- read.csv("~/fbb_06_22_15.csv")
fbb
summary(fbb)
hist(fbb$H)
hist(fbb$R)
ggplot(fbb, aes(H)) + geom_histogram()
ggplot(fbb, aes(H)) + geom_density()
ggplot(fbb, aes(R)) + geom_density()
ggplot(fbb, aes(HR)) + geom_density()
ggplot(fbb, aes(RBI)) + geom_density()
ggplot(fbb, aes(SB)) + geom_density()
ggplot(fbb, aes(OBP)) + geom_density()
ggplot(fbb, aes(SLG)) + geom_density()
ggplot(fbb, aes(K)) + geom_density()
ggplot(fbb, aes(QS)) + geom_density()
ggplot(fbb, aes(W)) + geom_density()
ggplot(fbb, aes(SV)) + geom_density()
ggplot(fbb, aes(ERA)) + geom_density()
ggplot(fbb, aes(WHIP)) + geom_density()
ggplot(fbb, aes(K_9)) + geom_density()
sapply(fbb, sd(x))
sapply(fbb, x, sd(x))
?sapply
sapply(names(fbb), sd())
sapply(fbb$x, sd())
sapply(fbb$x, sd(x))
tapply(fbb, names(fbb), sd(x))
sd(fbb$H)
sd(fbb[,1])
?colmeans
?colmean
?col
qplot(fbb, H)
?qplot
qplot(H, fbb)
qplot(H, fbb, geom=distribution)
qplot(H, fbb, geom="distribution")
qplot(H, fbb, geom=density)
qplot(H, fbb, geom="density")
qplot(H, data=fbb, geom="density")
for(stat in names(fbb)){
qplot(stat, data=fbb, gemo="density")
}
for(stat in names(fbb)){
qplot(stat, data=fbb, geom="density")
}
for(category in names(fbb)){
qplot(category, data=fbb, geom="density")
}
qplot(names(fbb)[1], data=fbb, geom="density")
names(fbb)
mdl <- lm(standings ~ . -team, data = fbb)
fbb$standings <- -1 * fbb$standings
mdl <- lm(standings ~ . -team, data = fbb)
summary(mdl)
?glmnet
library(glmnet)
install.packages("glmnet")
library(glmnet)
?glmnet
fit <- glmnet(fbb[,3:16], fbb$standings)
fit <- glmnet(fbb[,3:16], fbb$standings, family="gaussian")
fbb[,3:16]
fit <- glmnet(fbb[,3:16], fbb[,2], family="gaussian")
fit <- glmnet(x=fbb[,3:16], y=fbb[,2], family="gaussian")
fit <- glmnet(x=as.matrix(fbb[,3:16]), y=fbb[,2], family="gaussian")
fit
summary(fit)
fit$beta
qplot(fbb, aes(HR, standings))
qplot(HR, standings, data=fbb)
library(UsingR)
?father.son
attach(father.son)
mean(sheight)
library(dplyr)
filter(father.son, fheight >=71 & fheight <72)
filter(father.son, fheight >= 70.5 & fheight < 71.5) %>% mean(sheight)
f71 <- filter(father.son, fheight >=70.5 $ fheight < 71.5)
f71 <- filter(father.son, fheight >=70.5 & fheight < 71.5)
mean(f71$sheight)
X = matrix(1:1000,100,10)
X[25,3]
x=1:10
X = cbind(x, 2*x, 3*x, 4*x)
X
X = cbind(X, 5*x)
X
sum(X[7,])
matrix(1:60,20,3)
matrix(1:60,20,3,byrow=TRUE)
X = cbind(c(3, 2, 1, 5),)
X = cbind(c(3, 2, 1, 5), c(4, 2, -1, 0), c(-5, 2, 5, 0), c(1, -1, -5, 1))
y = c(10, 5, 7, 4)
solve(X) * y
solve(X) * t(y)
solve(X) * y
y * solve(X)
X
solve(X) %*% y
a <- matrix(1:12, nrow=4)
b <- matrix(1:15, nrow=3)
a %*% b
sum(a[3,] * b[,2])
X <- matrix(c(1,1,1,1,0,0,1,1),nrow=4)
rownames(X) <- c("a","a","b","b")
beta <- c(5, 2)
X %*% beta
X <- matrix(c(1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1),nrow=6)
rownames(X) <- c("a","a","b","b","c","c")
beta <- c(10,3,-3)
X %*% beta
g = 9.8 ## meters per second
h0 = 56.67
v0 = 0
n = 25
tt = seq(0,3.4,len=n) ##time in secs, t is a base function
y = h0 + v0 *tt - 0.5* g*tt^2 + rnorm(n,sd=1)
X = cbind(1,tt,tt^2)
A = solve(crossprod(X))%*%t(X)
A
A %*% y
-2 * (A %*% y)[3]
A[3,3]
?replicate
mc <- replicate(100000, y = h0 + v0 *tt - 0.5* g*tt^2 + rnorm(n,sd=1))
mc <- replicate(100000, h0 + v0 *tt - 0.5* g*tt^2 + rnorm(n,sd=1))
betahats <- -2 * (A %*% y)[3]
sd(betahats)
head(betahats)
betahats <- -2 * (A %*% mc)[3]
sd(betahats)
head(betahats)
head(mc)
head(betahats, 1)
head(mc, 1)
str(mc)
ghats <- c()
for (i=1:1e6){
y = h0 + v0 * tt - g * tt^2 + rnorm(n, sd=1)
ghats <- c(ghats, -2 * (A %*% y)[3])
}
ghats <- c()
for (i=1:1e6){
y = h0 + v0 * tt - g * tt^2 + rnorm(n, sd=1)
ghats <- c(ghats, -2 * (A %*% y)[3])
}
?for
?for
ghats <- c()
for (1:1e6){
y = h0 + v0 * tt - g * tt^2 + rnorm(n, sd=1)
ghats <- c(ghats, -2 * (A %*% y)[3])
}
for (1:1e6) {
y = h0 + v0 * tt - g * tt^2 + rnorm(n, sd=1)
ghats <- c(ghats, -2 * (A %*% y)[3])
}
ghats <- c()
for (i in 1:1e6) {
y = h0 + v0 * tt - g * tt^2 + rnorm(n, sd=1)
ghats <- c(ghats, -2 * (A %*% y)[3])
}
ghats <- c()
for (i in 1:1e5) {
y = h0 + v0 * tt - g * tt^2 + rnorm(n, sd=1)
ghats <- c(ghats, -2 * (A %*% y)[3])
}
sd(ghats)
x = father.son$fheight
y = father.son$sheight
n = length(y)
N = 50
betahats <- c()
for (i in 1:1e4) {
index = sample(n,N)
sampledat = father.son[index,]
x = sampledat$fheight
y = sampledat$sheight
betahats <- c(betahats, lm(y~x)$coef)
}
sd(betahats)
head(betahats)
betahats <- c()
for (i in 1:1e4) {
index = sample(n,N)
sampledat = father.son[index,]
x = sampledat$fheight
y = sampledat$sheight
betahats <- c(betahats, lm(y~x)$coef[2])
}
sd(betahats)
mean((y - mean(y))*(x - mean(x)))
x = father.son$fheight
y = father.son$sheight
n = length(y)
N = 50
set.seed(1)
index = sample(n,N)
sampledat = father.son[index,]
x = sampledat$fheight
y = sampledat$sheight
betahat = lm(y~x)$coef
fit = lm(y ~ x)
r_i <- y - fit$fitted.values
crossprod(r_i)
sse <- crossprod(r_i)
sigma2 <- sse / 48
X = cbind(rep(1,N), x)
solve(crossprod(X))
xtxi <- solve(crossprod(X))
var_beta <- sigma2 * diag(xtxi)
se_beta <- sqrt(var_beta)
se_beta
nx <- 5
ny <- 7
X = cbind(rep(1,nx + ny),rep(c(0,1),c(nx, ny)))
X2 = model.matrix(~ nx + ny)
X
X2
X2 = model.matrix(~ factor(c(rep('x', nx), rep('y', ny))))
X2
crossprod(X)
species <- factor(c("A","A","B","B"))
condition <- factor(c("control","treated","control","treated"))
mmx <- model.matrix(~species + condition)
library(contrast)
install.packages("contrast")
install.packages("contrast")
library(contrast)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename <- "spider_wolff_gorb_2013.csv"
library(downloader)
install.packes("downloader")
install.packages("downloader")
library(downloader)
if (!file.exists(filename)) download(url, filename)
spider <- read.csv(filename, skip=1)
fitTL <- lm(friction ~ type + leg, data=spider)
summary(fitTL)
(coefs <- coef(fitTL))
library(contrast)
library(contrast)
install.packages("contrast")
library(contrast)
install.packages("Hmisc")
library(contrast)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename <- "spider_wolff_gorb_2013.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
spider <- read.csv(filename, skip=1)
fitTL <- lm(friction ~ type + leg, data=spider)
summary(fitTL)
(coefs <- coef(fitTL))
(L4vsL2 <- contrast(fitTL,list(leg="L4",type="pull"),list(leg="L2",type="pull")))
X <- model.matrix(~ type + leg, data=spider)
(Sigma <- sum(fitTL$residuals^2)/(nrow(X) - ncol(X)) * solve(t(X) %*% X))
C <- matrix(c(0,0,-1,0,1),1,5)
spider$log2friction <- log2(spider$friction)
boxplot(log2friction ~ type*leg, data=spider)
fit_log <- lm(log2friction ~ type * leg, data = spider)
summary(fit_log)
anova(fit_log)
(L2vsL1 <- contrast(fit_log,list(leg="L2",type="pull"),list(leg="L1",type="pull")))
(L2vsL1push <- contrast(fit_log,list(leg="L2",type="push"),list(leg="L1",type="push")))
N <- 40
p <- 4
group <- factor(rep(1:p,each=N/p))
X <- model.matrix(~ group)
Y <- rnorm(N,mean=42,7)
mu0 <- mean(Y)
initial.ss <- sum((Y - mu0)^2)
mu0
s <- split(Y, group)
after.group.ss <- sum(sapply(s, function(x) sum((x - mean(x))^2)))
(group.ss <- initial.ss - after.group.ss)
group.ms <- group.ss / (p - 1)
after.group.ms <- after.group.ss / (N - p)
f.value <- group.ms / after.group.ms
rnorm(10)
rnorm(10)
f_values <- c()
for (i in 1:1000) {
Y <- rnorm(N,mean=42,7)
mu0 <- mean(Y)
initial.ss <- sum((Y - mu0)^2)
s <- split(Y, group)
after.group.ss <- sum(sapply(s, function(x) sum((x - mean(x))^2)))
(group.ss <- initial.ss - after.group.ss)
group.ms <- group.ss / (p - 1)
after.group.ms <- after.group.ss / (N - p)
f_values <- c(f_values, group.ms / after.group.ms)
}
(mean(f_values))
hist(f_values, col="grey", border="white", breaks=50, freq=FALSE)
xs <- seq(from=0,to=6,length=100)
lines(xs, df(xs, df1 = p - 1, df2 = N - p), col="red")
a <- c(0, 0, 1, 1)
b <- c(0, 1, 0, 1)
c <- c(1, 1, 0, 0)
X <- model.matrix(~a+b+c-1)
cat("ncol=",ncol(X),"rank=", qr(X)$rank,"\n")
X <- model.matrix(~a+b+c)
cat("ncol=",ncol(X),"rank=", qr(X)$rank,"\n")
sex <- factor(rep(c("female","male"),each=4))
trt <- factor(c("A","A","B","B","C","C","D","D"))
X <- model.matrix( ~ sex + trt)
qr(X)$rank
X <- model.matrix( ~ sex + trt)
qr(X)$rank
cat("ncol=",ncol(X),"rank=", qr(X)$rank,"\n")
Y <- 1:8
makeYstar <- function(a,b) Y - X[,2] * a - X[,5] * b
fitTheRest <- function(a,b) {
Ystar <- makeYstar(a,b)
Xrest <- X[,-c(2,5)]
betarest <- solve(t(Xrest) %*% Xrest) %*% t(Xrest) %*% Ystar
residuals <- Ystar - Xrest %*% betarest
sum(residuals^2)
}
fitTheRest
fitTheRest(1,2)
outer(1:3,1:3,`*`)
outer(-2:8,-2:8,Vectorize(fitTheRest))
install_github("ririzarr/rafalib")
library(rafalib)
imagemat(outer(-2:8,-2:8,Vectorize(fitTheRest)))
library(devtools)
install_github("ririzarr/rafalib")
library(rafalib)
imagemat(outer(-2:8,-2:8,Vectorize(fitTheRest)))
fit <- lm(friction ~ type + leg, data=spider)
(betahat <- coef(fit))
Y <- matrix(spider$friction, ncol=1)
X <- model.matrix(~ type + leg, data=spider)
QR <- qr(X)
(Q <- qr.Q(QR))
fit <- lm(friction ~ type + leg, data=spider)
(betahat <- coef(fit))
Y <- matrix(spider$friction, ncol=1)
X <- model.matrix(~ type + leg, data=spider)
QR <- qr(X)
Q <- qr.Q(QR)
Q[1,1]
R <- qr.R(QR)
R[1,1]
crossprod(Q, y)[1,1]
crossprod(Q, Y)[1,1]
solve(R) * crossprod(Q, Y)
solve(R) %*% crossprod(Q, Y)
betahat
7/12
5/12
?mode
j <- c(1125, 1277, 1275, 1370, 1155, 1229, 818)
median(j)
mean(j)
22 + 2.5
24.5 + 2.5
f <- c(rep(22.5, 16), 30.5, 30.5, 36.5, 36.5, rep(42.5, 3), 48.5)
mean(f)
f <- c(rep(24.5, 16), 30.5, 30.5, 36.5, 36.5, rep(42.5, 3), 48.5)
mean(f)
fw <- c(13, 10, 12, 11, 7, 8, 6, 6, 10, 7, 12, 4, 6, 5, 2, 2)
var(fw)
sd(fw)
mean(fw)
sum(fw)
121/16
centered <- fw - mean(fw)
sq <- fw * fw
sq
(13-7.5625)^2
centered
sq <- centered * centered
sq
sum(sq)
sum(sq) / 16
sigma2 <- sum(sq) / 16
sigma2
sqrt(sigma2)
0.68*25
?quartile
?quartiles
?quart
?quant
c(56, 63, 51, 60, 60, 54, 63 59, 80, 63, 60, 62, 65, 57, 60)
eleven <- c(56, 63, 51, 60, 60, 54, 63, 59, 80, 63, 60, 62, 65, 57, 60)
length(eleven)
summary(eleven)
63 - 58
boxplot(eleven)
execs <- c(43, 56, 54, 57, 50, 41, 65, 66, 48, 47, 56, 45, 57, 50, 28, 41, 61, 35, 56, 47, 38, 53, 40, 43, 61, 50, 42, 54, 43, 44)
length(execs)
1/30
hist(execs)
?quantile
quantile(execs, probs = seq(0, 1, 0.01))
quantile(execs, probs = seq(0, 1, 1/30))
.7333 * 30
sort(execs)
21/30
.25 * 30
(20-28.1)/3.4
henri <- (20-28.1)/3.4
qnorm(henri)
pnorm(henri)
pt(henri)
42-33
9/4
pnorm(2)
pnorm(3)
pnorm(1)
pnorm(-1)
setwd("~/Data Science Coursera/capstone-JHU-swiftkey/JHU-DSS-capstone/code")
library(tm)      # for text mining
library(ggplot2) # for plotting
library(dplyr)   # for data manipulation
library(stringr) # for reg exp, string replacement
library(RWeka)   # for NLP, n-gram tokenizer
scorp <- Corpus(DirSource(file.path("~", "Data Science Coursera", "capstone-JHU-swiftkey", "JHU-DSS-capstone", "data")))
# custom function to replace characters with spaces
to_space <- content_transformer(function(x, pattern)
str_replace_all(x, pattern, " "))
# replace /, @, |, -,  with a space
scorp <- tm_map(scorp, to_space, "/|@|\\||-")
# custom function to remove hashtags
rmv_hashtags <- content_transformer(function(x)
str_replace_all(x, "#.* |#.*$",""))
scorp <- tm_map(scorp, rmv_hashtags)
# make all words lowercase
scorp <- tm_map(scorp, content_transformer(tolower))
# remove numbers
scorp <- tm_map(scorp, removeNumbers)
# remove punctuation
scorp <- tm_map(scorp, removePunctuation)
# remove anything left that isn't letters
scorp <- tm_map(scorp, to_space, "[^A-Za-z]")
# strip whitespace
scorp <- tm_map(scorp, stripWhitespace)
# convert to plain text
scorp <- tm_map(scorp, PlainTextDocument)
# View: scorp[1][[1]][[1]][line#]
ngram <- function(n) {
options(mc.cores = 2)
ctrl <- Weka_control(min = n, max = n)
ngram_tokenizer <- function(x) NGramTokenizer(x, control = ctrl)
dtm_ngram <- DocumentTermMatrix(scorp,
control = list(tokenize = ngram_tokenizer))
return(dtm_ngram)
}
unigrams <- ngram(1)
saveRDS(unigrams, "unigrams.rds")
bigrams <- readRDS("bigrams.rds")
trigrams <- readRDS("trigrams.rds")
install.packages("slam")
install.packages("slam")
install.packages("slam")
install.packages("slam")
install.packages("slam")
library(slam)
install.packages("slam")
install.packages("slam")
